# C:\Users\marla\Dusk-Sky\dusk-sky-microservices\nginx\conf.d\dusk_internal_gateway.conf
# Este archivo maneja las peticiones HTTP internas del frontend a nginx_gateway
# y la resolución dinámica de hosts dentro de la red Docker.

# Nginx necesita un servidor DNS para resolver nombres de servicios Docker.
# 127.0.0.11 es la IP del servidor DNS interno de Docker.
# 'valid=5s' significa que Nginx reintentará la resolución cada 5 segundos si falla.
resolver 127.0.0.11 valid=5s; # <--- ¡CLAVE! Directiva resolver en el nivel superior (dentro del contexto http global de Nginx)

# --- Upstreams para TODOS tus microservicios backend ---
# Asegúrate de que los nombres de servicio y los puertos internos coincidan con tu docker-compose ps
# y con los nombres de tus contenedores.

upstream auth_service_backend {
    server auth_service:8000;
}
upstream game_service_backend {
    server game_service_app:80; # Usando game_service_app como en tu docker-compose ps
}
upstream review_service_backend {
    server reviewservice:8000;
}
upstream user_manager_service_backend {
    server user_manager_service_app:8000; # Usando user_manager_service_app como en tu docker-compose ps
}
upstream user_game_tracking_service_backend {
    server user_game_tracking_service:8005;
}
upstream commentservice_backend {
    server commentservice:80;
}
upstream friendship_service_backend {
    server friendshipservice:8006; # Usando friendshipservice como en tu docker-compose ps
}
upstream gamelistservice_backend {
    server gamelistservice:80;
}
upstream moderationservice_backend {
    server moderationservice:80;
}

# --- Bloque Server para tráfico HTTP INTERNO (desde el frontend) ---
# Este bloque escuchará en el puerto 80 para las llamadas de 'http://nginx_gateway/...'
server {
    listen 80;
    server_name nginx_gateway; # ¡CRÍTICO! Este server_name debe coincidir con el Host del frontend

    # --- RUTAS API ---
    # El proxy_pass debe coincidir con la ruta que el backend espera.
    # Si tu frontend envía /segmento/path y el backend espera /segmento/path:
    # proxy_pass http://backend_upstream/segmento/path;
    # (Esto implica que el backend tiene [Route("segmento")] y el endpoint es /[path])

    # Auth Service: Frontend llama a http://nginx_gateway/auth/...
    location ^~ /auth/ {
        proxy_pass http://auth_service_backend/auth/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Game Service: Frontend llama a http://nginx_gateway/api/game/...
    location ^~ /api/game/ {
        proxy_pass http://game_service_backend/api/game/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ^~ /comments {
        proxy_pass http://comment_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Review Service: Frontend llama a http://nginx_gateway/reviews/...
    # Los logs anteriores mostraron /reviews/reviews/friends. Asumo que el backend espera /reviews/friends.
    # Por lo tanto, el proxy_pass debe incluir /reviews/
    location ^~ /reviews {
        proxy_pass http://review_service_backend/reviews;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location ^~ /friendships {
        proxy_pass http://friendship_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # GameList Service: Frontend llama a http://nginx_gateway/lists/...
    location ^~ /lists/ {
        proxy_pass http://gamelistservice_backend/lists/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Moderation Service: Frontend llama a http://nginx_gateway/moderation/...
    location ^~ /moderation/ {
        proxy_pass http://moderationservice_backend/moderation/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # User Manager Service: Frontend llama a http://nginx_gateway/users/...
    # Tu log anterior mostró GET http://nginx_gateway/profiles/ID que fue interceptado por el frontend.
    # Ahora, con el prefijo /api/users/ en el frontend, será /api/users/profiles/ID
    location ^~ /profiles/ { # <--- Asumo que tu frontend ahora llama a /api/users/
        rewrite ^/api/users/(.*)$ /profiles/$1 break;
        proxy_pass http://user_manager_service_backend; # <--- Revisa cómo tu backend maneja /users/profiles
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # User Game Tracking Service: Frontend llama a http://nginx_gateway/track/... o /api/trackings/...
    # Un log anterior mostró POST /track/api/trackings HTTP/1.1" 404.
    # Si ahora usas /api/track/...
    location ^~ /track/ { # Asumo que tu frontend ahora llama a /api/track/
        rewrite ^/track/(.*)$ /$1 break;
        proxy_pass http://user_game_tracking_service_backend; # <--- Ajusta según cómo el backend espera /track/api/trackings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # --- Ruta para servir el propio Frontend UI ---
    # Este location `/` debe ir al final, ya que es un catch-all.
    location / {
        # Nginx resolverá 'dusk_frontend_container' dinámicamente usando la directiva 'resolver'.
        proxy_pass http://dusk_frontend_container:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}